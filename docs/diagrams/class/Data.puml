@startuml

skinparam classAttributeIconSize 0

class TaskManager {
- {static} logger: Logger
- {static} tasks: HashMap <LocalDate, List<Task>>

+ {static} addTask (date: LocalDate, taskDescription: String, taskType: TaskType, dates: String[], times: String[])
+ {static} updateTask (date: LocalDate, taskIndex: int, newTaskDescription: String, scanner: Scanner, inMonthView: boolean, weekView: WeekView)
+ {static} updateEventTask (scanner: Scanner, dayTasks: List<Task>, taskIndex: int, newTaskDescription: String, oldDescription: String)
+ {static} updateDeadlineTask (scanner: Scanner, dayTasks: List<Task>, taskIndex: int, newTaskDescription: String, oldDescription: String)
+ {static} getDayTasks (date: LocalDate)
+ {static} parseTaskType (userInput: String)
+ {static} deleteManager (weekView: WeekView, monthView: MonthView, inMonthView: boolean, \n                         taskManager: TaskManager, day: String, taskIndex: int)
+ {static} deleteAllTasksOnDate (taskManager: TaskManager, specifiedDate: LocalDate)
+ {static} getEventsForDate (date: LocalDate)
+ deleteTask (date: LocalDate, taskIndex: int, isMuted: boolean)
+ markTaskAsCompleted (date: LocalDate, taskIndex: int)
+ markTaskAsNotCompleted (date: LocalDate, taskIndex: int)
+ getTasksForDate (date: LocalDate)
+ addManager (scanner: Scanner, weekView: WeekView, monthView: MonthView, inMonthView: boolean, \n                      action: String, day: String, taskTypeString: String, taskDescription: String)
+ freeTimeManager (weekView: WeekView, monthView: MonthView, inMonthView: boolean, day: String)
+ markManager (weekView: WeekView, monthView: MonthView, inMonthView: boolean, day: String, taskIndex: int)
+ handleMarkingOfTask (taskIndex: int, date: LocalDate)
+ priorityManager (weekView: WeekView, monthView: MonthView, inMonthView: boolean, day: String, taskIndex: int, \n                          priorityLevelString: String)
+ updateManager (scanner: Scanner, weekView: WeekView, monthView: MonthView, inMonthView: boolean, \n                           taskManager: TaskManager, day: int, taskIndex: int, newDescription: String)
+ addTasksFromFile (tasksFromFile: Map<LocalDate, List<Task>>)
+ getFreeTimeSlots (events: List<Task>, currentDate: LocalDate)
+ printFreeTimeSlots (freeTimeSlots: List<String>, startDate: LocalDate)
- {static} updateEventLogging (newTaskDescription: String, oldDescription: String, oldEvent: Event, newDatesAndTimes: String[])
- {static} addTaskBasedOnType (scanner: Scanner, taskDescription: String, taskType: TaskType, date: LocalDate)
- {static} parseAndAddEvent (scanner: Scanner, taskDescription: String, taskType: TaskType, date: LocalDate)
- {static} findDateFromDayNumber (weekView: WeekView, monthView: MonthView, inMonthView: boolean, dayInt: int)
- setPriorityLevelOfTask (taskIndex: int, date: LocalDate, priorityLevelString: String)
}

class Task {
# name: String
# priorityLevel: TaskPriorityLevel
# isCompleted: boolean
+ isCompleted ()
+ setCompleteness (completed: boolean)
+ getMarkedStatusIcon ()
+ setPriorityLevel (priorityLevelOfTask: TaskPriorityLevel)
+ getPriorityLevelIcon ()
+ getDisplayFormat ()
}

class Todo extends Task {
+ getTaskType ()
+ getSaveFormat ()
+ todoToVEvent (todo: Todo)
}

class Deadline extends Task {
# byDate: String
# byTime: String
+ getByDate ()
+ getByTime ()
+ getTaskType ()
+ getSaveFormat ()
}
class Event extends Task {
# startDate: String
# endDate: String
# startTime: String
# endTime: String
+ getStartDate ()
+ getStartTime ()
+ getEndDate ()
+ getEndTime ()
+ getTaskType ()
+ getSaveFormat ()
}


enum TaskType <<enumeration>> {
TODO
EVENT
DEADLINE
INVALID
}

enum TaskPriorityLevel <<enumeration>> {
HIGH
MEDIUM
LOW
}

hide circle

Task "*"  <- "1"TaskManager

@enduml
